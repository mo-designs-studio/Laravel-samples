<?php

namespace App\Models\Recipes;

use App\Models\Polymorphic\Comment;
use App\Models\Polymorphic\Image;
use App\Models\Polymorphic\Tag;
use App\Models\User\User;
use App\Models\User\UserProfile;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;
use Ramsey\Uuid\Uuid;

class Recipe extends Model
{
    protected $guarded = ['id', 'uuid', 'created_at', 'updated_at'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function (Model $model) {
            $model->setAttribute('uuid', Uuid::uuid4());
        });
    }

    protected static function booted()
    {
        static::addGlobalScope('is_public', function (Builder $builder) {
            $builder->where('is_public', 1);
        });
    }

    public function recipeCategory()
    {
        return $this->belongsTo(RecipeCategory::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function userYummy()
    {
        return $this->belongsToMany(User::class, 'Yummies', 'recipe_id', 'user_id')->withTimestamps();
    }

    public function ingredients()
    {
        return $this->hasMany(RecipeIngredient::class);
    }

    public function recipeNutrients()
    {
        return $this->hasMany(RecipeNutrient::class);
    }

    public function images()
    {
        return $this->morphMany(Image::class, 'imageAble');
    }

    public function tags()
    {
        return $this->morphMany(Tag::class, 'tagable');
    }

    public function comments()
    {
        return $this->morphMany(Comment::class, 'commentable');
    }

    public function userBookmark()
    {
        return $this->belongsToMany(User::class, 'bookmarks', 'recipe_id', 'user_id')->withTimestamps();
    }

    public function calculateRecipeNutrient()
    {
        $totalIngredientsGramWeight = 0;
        $totalProtein = 0;
        $totalFat = 0;
        $totalCarbohydrate = 0;
        $totalFiber = 0;
        $totalSugar = 0;
        $totalNetCarbohydrate = 0;
        $recipeIngredients = $this->ingredients;
        foreach ($recipeIngredients as $ingredient) {
            $ingredientGramWeight = $this->calculateRecipeIngredientGramWeight($ingredient);
            $totalIngredientsGramWeight += $ingredientGramWeight;
            $ingredientNutrient = $this->calculateIngredientNutrient($ingredient, $ingredientGramWeight);
            $totalProtein += $ingredientNutrient['protein'];
            $totalFat += $ingredientNutrient['fat'];
            $totalCarbohydrate += $ingredientNutrient['carbohydrate'];
            $totalFiber += $ingredientNutrient['fiber'];
            $totalSugar += $ingredientNutrient['sugar'];
            $totalNetCarbohydrate += $ingredientNutrient['net_carbohydrate'];
        }
        return [
            'serving_gram_weight' => $totalIngredientsGramWeight,
            'protein' => $totalProtein,
            'fat' => $totalFat,
            'carbohydrate' => $totalCarbohydrate,
            'fiber' => $totalFiber,
            'sugar' => $totalSugar,
            'net_carbohydrate' => $totalNetCarbohydrate,
            'calories' => $this->calculateRecipeCalories(['protein' => $totalProtein, 'fat' => $totalFat, 'net_carbohydrate' => $totalNetCarbohydrate]),
        ];
    }

    public function calculateRecipeNutrientsPerServing($servingWeightUnit, $servingWeight, $recipeNutrient)
    {
        $servingGramWeight = $servingWeight * $this->servingUnitConversion($servingWeightUnit);
        $servingPerRecipeWeight = round($servingGramWeight / $recipeNutrient['serving_gram_weight'], 2);
        return [
            'protein' => round($recipeNutrient['protein'] * $servingPerRecipeWeight, 2),
            'fat' => round($recipeNutrient['fat'] * $servingPerRecipeWeight, 2),
            'carbohydrate' => round($recipeNutrient['carbohydrate'] * $servingPerRecipeWeight, 2),
            'fiber' => round($recipeNutrient['fiber'] * $servingPerRecipeWeight, 2),
            'sugar' => round($recipeNutrient['sugar'] * $servingPerRecipeWeight, 2),
            'net_carbohydrate' => round($recipeNutrient['net_carbohydrate'] * $servingPerRecipeWeight, 2),
            'calories' => $this->calculateRecipeCalories(['protein' => $recipeNutrient['protein'], 'fat' => $recipeNutrient['fat'], 'net_carbohydrate' => $recipeNutrient['net_carbohydrate']]),
        ];
    }

    private function calculateRecipeIngredientGramWeight(RecipeIngredient $ingredient)
    {
        return round($ingredient->qty * $ingredient->unit->gram_weight, 2);
    }

    private function calculateIngredientNutrient(RecipeIngredient $ingredient, $ingredientWeight)
    {
        $proteinWeight = round($ingredient->food->protein * $ingredientWeight / 100, 2);
        $fatWeight = round($ingredient->food->fat * $ingredientWeight / 100, 2);
        $carbohydrateWeight = round($ingredient->food->carbohydrate * $ingredientWeight / 100, 2);
        $fiberWeight = round($ingredient->food->fiber * $ingredientWeight / 100);
        $sugarWeight = round($ingredient->food->sugar * $ingredientWeight / 100);
        $netCarbohydrateWeight = round($ingredient->food->net_carb * $ingredientWeight / 100, 2);
        return [
            'protein' => $proteinWeight,
            'fat' => $fatWeight,
            'carbohydrate' => $carbohydrateWeight,
            'fiber' => $fiberWeight,
            'sugar' => $sugarWeight,
            'net_carbohydrate' => $netCarbohydrateWeight
        ];
    }

    private function calculateRecipeCalories($recipeNutrients)
    {
        $protein = $recipeNutrients['protein'];
        $fat = $recipeNutrients['fat'];
        $netCarbohydrate = $recipeNutrients['net_carbohydrate'];
        return round(($protein * 4) + ($fat * 9) + ($netCarbohydrate * 4));
    }

    private function servingUnitConversion($servingWeightUnit)
    {
        $servingUnitType = ServingUnit::findOrFail($servingWeightUnit);
        return $servingWeightUnit->conversion_per_gram;
    }

    public function getPostImageFileAttribute()
    {
        $recipeImages = $this->images();
        return $recipeImages->where('image_use', 3)->first();
    }

    public function getRecipePostImageAttribute()
    {
        return Storage::disk('recipes')->url($this->uuid . '/' . $this->postImageFile->image_file_name);
    }

    public function getLastCommentAttribute()
    {
        return $this->comments()->orderBy('last_action', 'desc')->first();
    }

    public function getLastSubCommentAttribute()
    {
        $lastComment = $this->lastComment;
        return isset($lastComment) ? $lastComment->lastCommentOnComment : null;
    }

    public function getTotalCommentsAttribute()
    {
        $comments = $this->comments;
        return count($comments) + $comments->sum('children_count');
    }

    private function collectRecipePostCommentsInfo()
    {
        $totalComments = $this->totalComments;
        $lastComment = $this->lastComment;
        $lastSubComment =  $this->lastSubComment;
        $recipePostCommentsInfo = [
            'total_comments' => $totalComments,
            'last_comment' => [
                'comment_author' => isset($lastComment) ? $lastComment->user->profile->profile_name : null,
                'comment' => isset($lastComment) ? $lastComment->comment : null,
            ],
            'total_sub_comments' => isset($lastSubComment) ? $lastComment->children_count : null,
            'last_sub_comment' => [
                'sub_comment_author' => isset($lastSubComment) ? $lastSubComment->user->profile->profile_name : null,
                'sub_comment' => isset($lastSubComment) > 0 ? $lastSubComment->comment : null,
            ]
        ];
        return $recipePostCommentsInfo;
    }

    public function collectRecipePostInfo($user)
    {
        $yummyRelation = $user->recipeYummy()->wherePivot('recipe_id', $this->id)->first();
        $bookmarkRelation = $user->recipeBookmark()->wherePivot('recipe_id', $this->id)->first();
        $createdTime = Carbon::parse($this->created_at);
        return [
            'recipe_id' => $this->uuid,
            'title' => $this->title,
            'post_text' => $this->description,
            'cooking_time' => $this->cooking_time,
            'yummies' => $this->yummies,
            'post_image_url' => $this->recipePostImage,
            'post_age' => $createdTime->diffForHumans(Carbon::now()),
            'user' => [
                'username' => $this->user->profile->profile_name,
                'profile_image' => $user->profile->profileImage
            ],
            'yummy_relation' => isset($yummyRelation),
            'bookmark_relation' => isset($bookmarkRelation),
            'comments' => $this->collectRecipePostCommentsInfo(),
        ];
    }



    static function getRecipeByUuid($uuid)
    {
        $recipe = self::query()->where(['uuid' => $uuid])->first();
        if (is_null($recipe)) return new UserProfile();
        return $recipe;
    }

}
